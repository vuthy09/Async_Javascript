/*jshint esnext: true */
//callbacks

let stocks = {
    Fruits : ["strawberry", "grapes", "banana", "apple"],
    liquid : ["water", "ice"],
    holder : ["cone", "cup", "stick"],
    toppings : ["chocolate", "peanuts"],
 };


// 1st Function

let order = (fruit_name, call_production) =>{

  setTimeout(function(){

    console.log(`${stocks.Fruits[fruit_name]} was selected`)

// Order placed. Call production to start
   call_production();
  },2000)
};

// 2nd Function

let production = () =>{
  setTimeout(()=>{
    console.log("production has started")
    
    setTimeout(()=>{
      console.log("The fruit has been chopped")
      
      setTimeout(()=>{
        console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)
        
        setTimeout(()=>{
          console.log("start the machine")
          setTimeout(()=>{
            console.log(`ice cream placed on ${stocks.holder[0]}`)
            
            setTimeout(()=>{
              console.log(`add ${stocks.toppings[0]} on top as topping`)
              
              setTimeout(()=>{
                console.log("serve ice cream")
              },2000)
            },3000)
          },2000)
        },1000)
      },1000)
    },2000)
  },0)
};

// Trigger 👇
order(0, production);

//Promises
let stocks = {
    Fruits : ["strawberry", "grapes", "banana", "apple"],
    liquid : ["water", "ice"],
    holder : ["cone", "cup", "stick"],
    toppings : ["chocolate", "peanuts"],
 };

let is_shop_open = false;

let order = ( time, work ) => {

  return new Promise( ( resolve, reject ) => {

    if( is_shop_open ){

      setTimeout(()=>{

       // work is 👇 getting done here
        resolve( work() )

// Setting 👇 time here for 1 work
       }, time)

    }

    else{
      reject( console.log("Our shop is closed") )
    }

  })
}

// Set 👇 time here
order( 2000, ()=>console.log(`${stocks.Fruits[0]} was selected`))
//    pass a ☝️ function here to start working

.then(()=>{
  return order(0,()=>console.log("production has started"))
})

.then(()=>{
  return order(2000,()=>console.log("fruit has been chopped"))
})

.then(()=>{
  return order(1000,()=>console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`))
})

.then(()=>{
  return order(1000,()=>console.log("start the machine"))
})

.then(()=>{
  return order(2000,()=>console.log(`ice cream placed on ${stocks.holder[0]}`))
})

.then(()=>{
  return order(3000,()=>console.log(`${stocks.toppings[0]} selected as topping`))
})

.then(()=>{
  return order(2000,()=>console.log("serve ice cream"))
})

.catch(()=>{
  console.log("customer left")
})

.finally(()=>{
  console.log("end of day")
})

// Async/Await

let is_shop_open = true;

function time(ms){
  return new Promise((resolve, reject) =>{
    
    if(is_shop_open){
      setTimeout(resolve,ms)
      
    }else{
      
      reject(console.log("shop is closed"))
      
    }
    
  });
}

async function kitchen(){
    try{
	await time(2000)
	console.log(`${stocks.Fruits[0]} was selected`)

	await time(0000)
	console.log("production has started")

	await time(2000)
	console.log("fruit has been chopped")

	await time(1000)
	console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)

	await time(1000)
	console.log("start the machine")

	await time(2000)
	console.log(`ice cream placed on ${stocks.holder[1]}`)

	await time(3000)
	console.log(`${stocks.toppings[0]} as toppings`)

	await time(2000)
	console.log("Serve Ice Cream")
    }

    catch(error){
	 console.log("customer left")
    }
}

// Trigger
kitchen();
